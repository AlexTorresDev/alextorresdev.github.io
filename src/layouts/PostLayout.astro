---
import type { MarkdownHeading } from 'astro'
import { CollectionEntry, getCollection, getEntries } from 'astro:content'
import { Image } from '@astrojs/image/components'
import snarkdown from 'snarkdown'
import { SITE_TITLE } from 'src/config'
import { GITHUB_EDIT_URL } from 'src/consts'
import BaseLayout from '@layouts/BaseLayout.astro'
import RightSidebar from '@components/RightSidebar/RightSidebar.astro'
import TableOfContents from '@components/RightSidebar/TableOfContents'
import Navigation from '@components/Navigation.astro'
import Badge from '@components/Badge.astro'

type Props = CollectionEntry<'blog'>['data'] & {
  id: string
  headings: MarkdownHeading[]
}

const dateFormat = Intl.DateTimeFormat('es-ES', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
})

const postEntries = await getCollection('blog')

const {
  id,
  headings,
  title,
  description,
  heroImage,
  pubDate,
  tags,
  updatedDate,
  relatedPosts
} = Astro.props

const displayDate = dateFormat.format(pubDate)
const displayUpdateDate = dateFormat.format(updatedDate)

const currentPage = Astro.url.pathname
const currentFile = `src/content${currentPage.replace(/\/?docs/, '')}.md`
const githubEditUrl = `${GITHUB_EDIT_URL}/${currentFile}`

const index = postEntries.findIndex(
  (p) => p.id === id && p.data.pubDate === pubDate
)
const pagination = {
  previous: postEntries[index + 1],
  next: postEntries[index - 1]
}

let relativePosts: CollectionEntry<'blog'>[] = []

if (relatedPosts) {
  relativePosts = await getEntries(relatedPosts)
}
---

<BaseLayout
  title={`${title} - ${SITE_TITLE.split('-')[0]}`}
  description={description}
  image={heroImage?.source}
>
  <div class="md:flex md:gap-16">
    <article class="prose prose-lg prose-img:mx-auto">
      <h1 class="title my-2 text-4xl font-bold">{title}</h1>
      <div class="flex justify-between flex-col gap-6 mt-8">
        <div
          class="flex flex-col items-start justify-between gap-4 md:flex-row md:items-end"
        >
          <div class="flex flex-col justify-between gap-2 text-[15px]">
            {
              pubDate && (
                <div>
                  Publicado: <time>{displayDate}</time>
                </div>
              )
            }
            {
              updatedDate && (
                <div>
                  Ãšltima vez actualizado: <time>{displayUpdateDate}</time>{' '}
                </div>
              )
            }
          </div>

          {
            tags && (
              <div class="flex items-center gap-2">
                {tags.map((b) => (
                  <Badge text={b} />
                ))}
              </div>
            )
          }
        </div>

        <div class="dropdown lg:hidden mb-8 flex justify-end">
          <button type="button" tabindex="0" class="btn gap-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h7"></path>
            </svg>
            <span>Tabla de contenidos</span>
          </button>

          <div
            tabindex="0"
            class="dropdown-content mt-3 shadow bg-base-100 rounded-md w-52 overflow-hidden not-prose"
          >
            <TableOfContents
              client:media="(max-width: 50em)"
              headings={headings}
              showTitle={false}
            />
          </div>
        </div>
      </div>
      <div class="divider my-2"></div>

      {
        heroImage && (
          <div class="mb-10">
            <Image
              aspectRatio={'16:9'}
              width={750}
              height={422}
              format="webp"
              src={heroImage.source}
              alt={title}
              class="w-full rounded overflow-hidden mb-2"
            />
            {heroImage.attribution && (
              <div
                class="text-center text-sm opacity-60"
                set:html={snarkdown(heroImage.attribution)}
              />
            )}
          </div>
        )
      }

      <slot />

      <Navigation {...pagination} />

      <script
        src="https://giscus.app/client.js"
        data-repo="AlexTorresDev/alextrs.dev"
        data-repo-id="MDEwOlJlcG9zaXRvcnkyOTg5MzExNzI="
        data-category="Blog Comments"
        data-category-id="DIC_kwDOEdFT5M4CYfdZ"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="noborder_dark"
        data-lang="es"
        data-loading="lazy"
        crossorigin="anonymous"
        async
      ></script>
    </article>

    <RightSidebar headings={headings} githubEditUrl={githubEditUrl} />
  </div>
</BaseLayout>

<style is:inline>
  main {
    max-width: 100% !important;
    width: 1152px !important;
  }

  article {
    min-width: calc(100% - 320px);
    margin: 0 auto;
  }

  article .giscus {
    margin-top: 3rem;
  }
</style>
